#!/bin/dash
#written by Wanze Liu z5137189



# Subset 1
# remove file from current working directory and index directory

legitdir='.legit'
sub_legitdir='.git'
fullpath="$legitdir/$sub_legitdir"
indexdir="objects"

# function 1
# return the latest num of the commit 
commitseq()
{
    count=0
    while ( test $count -ge 0 )
    do
        if [ -d "$fullpath/.commit_$count" ]
        then
            count=$(( count+1 ))
        else
            return $count
        fi
    done
}

# function 2
# file comparison function with three options
# compare between current , index , last commit directory

file_compare()
{   
    filename=".commit_$3"
    last_commit="$fullpath/$filename/$2"

    # option 1: compare specified file between working dir and index dir (used by rm, status)
    if ( test $1 -eq 1 )
    then
        if ( test -e "$fullpath/$indexdir/$2")
        then
            diff "$fullpath/$indexdir/$2" "$2" >/dev/null
            if [ $? != 0 ]
            then
                echo 1
                exit 1
            fi
        else
             # if file cannot be found in index dir
            echo 2
            exit 1
        fi
    fi

     # option 2: compare specified file between working dir and last commit 
    if ( test $1 -eq 2 )
    then
        if ( test -e "$last_commit")
        then
            diff "$last_commit" "$2" >/dev/null
            if [ $? != 0 ]
            then
                echo 1
                exit 1
            fi
        # if file cannot be found in commit repository
        else
            echo 2
            exit 1
        fi
    fi

    # option 3: compare specified file between index dir and last commit 
    if ( test $1 -eq 3 )
    then
        if ( test -e "$last_commit" && test -e "$fullpath/$indexdir/$2")
        then
            diff "$last_commit" "$fullpath/$indexdir/$2" >/dev/null
            if [ $? != 0 ]
            then
                echo 1
                exit 1
            fi
        else
             # if file cannot be found in commit repository or index dir
            echo 2
            exit 2
        fi
    fi
    #if file is the same 
    echo 0
}

# function 3
# check wether the file is different before rm

check()
{

    commitseq 
    last_num="$?" 
    pre_seq=$((last_num-1))

    #work == current directory
    #index == objects directory
    #last == repository last commit file
    work_index=`file_compare 1 $1 $pre_seq`
    work_last=`file_compare 2 $1 $pre_seq`
    index_last=`file_compare 3 $1 $pre_seq`
    force=$2
    cached=$3

    if ( test $force -eq 0 )
    then
        # if file in index dir differs from working dir and last commit 
        # all different 
        if (test $work_index -eq 1) && (test $index_last -eq 1)
        then 
            echo "legit-rm: error: '$1' in index is different to both working file and repository"
            exit 1
        fi

        if (test $cached -eq 0) && (test $force -eq 0)
        then
        # if file in index dir same as working dir, but has not commit, or differs from last commit
            if (test $work_index -eq 0) && ((test $index_last -eq 1) || (test $work_last -eq 2))
                then
                echo "legit-rm: error: '$1' has changes staged in the index"
                exit 1
            #  if file in working dir differs from last commit, and has not been added into index dir  
            elif (test $work_last -eq 1) && (test $index_last -eq 0)
                then
                echo "legit-rm: error: '$1' in repository is different to working file"
                exit 1
            fi
        fi
    fi

    if (test $work_index -eq 2)
    then
        echo "legit-rm: error: '$1' is not in the legit repository"
        exit 1
    fi

}



# if cached specified 
# remove file from index directory
# otherwise , remove both 
rm_file()
{   
    # $1 : cached flag 
    # $2 : file name 

    # if cached flag == 0 , no cached needed 
    if ( test $1 -eq 0 )
    then
        # remove file
        rm $2
    fi
    # remove file in index directory
    rm  $fullpath/$indexdir/$2
}

main()
{
    force=0
    cached=0
    #if no parameter
    if ( test $# -eq 0 )
    then
        echo "usage: legit-rm [--force] [--cached] <filenames>"
        exit 1
    fi

    if (echo "$1" | egrep "^-")>/dev/null
    then
        if ( test $# -eq 1 ) && (( echo "$1" | egrep -v "\(--force\)") || !( echo "$1" | egrep -v "\(--cached\)")) >/dev/null
        then
            echo "usage: legit-rm [--force] [--cached] <filenames>"
            exit 1
        fi
    fi

    if ((echo "$1" | egrep "^-") && (echo "$2" | egrep "^-"))>/dev/null
    then
    #if only two parmeters
        if ( test $# -eq 2 ) && (( echo "$1" | egrep -v "\(--force\)") && ( echo "$2" | egrep -v "\(--cached\)"))>/dev/null
        then
            echo "usage: legit-rm [--force] [--cached] <filenames>"
            exit 1
        fi 
    fi

    if ( echo $1 | egrep "\-\-f") >/dev/null
    then
        force=1
    fi

    if (( echo "$1" | egrep  "\-\-c") || ( echo "$2" | egrep  "\-\-c"))>/dev/null
    then
        cached=1
    fi


    # loop STDIN input to check first , if file regulation broken , give error and exit
    for file in $@
    do
        if (echo $file | egrep -v "^-") >/dev/null
        then
        check $file $force $cached
        fi
    done

    # loop STDIN input to remove 
    for file in $@
    do
        if (echo $file | egrep -v "^-") >/dev/null
        then
        rm_file $cached $file
        fi
    done

    
}

main $@ 



