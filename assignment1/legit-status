#!/bin/sh
#written by Wanze Liu , z5137189

legitdir='.legit'
sub_legitdir='.git'
fullpath="$legitdir/$sub_legitdir"
indexdir="objects"


#function : return the latest commit number 
# commitseq()
# {

#     count=0
#     while ( test $count -ge 0 )
#     do
#         if [ -d "$fullpath/.commit_$count" ]
#         then
#             count=$(( count+1 ))
#         else
#             return $count
#         fi
#     done
# }


#function : return the latest commit number in that branch
commitseq_chekout()
{

    current_branch=`cat $fullpath/HEAD`
    num=`cat "$fullpath/Branch.$current_branch" | tail -1 | sed "s/.*://"`
    return $num
}

commitseq_chekout
#function : compare the two file 
# three options
file_compare()
{   
    filename=".commit_$3"
    last_commit="$fullpath/$filename/$2"

    # option 1: compare specified file between working directory and index directory
    if ( test $1 -eq 1 )
    then
        if ( test -e "$fullpath/$indexdir/$2")
        then
            diff "$fullpath/$indexdir/$2" "$2" >/dev/null 2>&1
            if [ $? != 0 ]
            then
                echo 1
                exit 1
            fi
        else
             # if file cannot be found in index directory
            echo 2
            exit 1
        fi
    fi

     # option 3: compare specified file between working directory and last commit directory
    if ( test $1 -eq 2 )
    then
        if ( test -e "$last_commit")
        then
            diff "$last_commit" "$2" >/dev/null 2>&1
            if [ $? != 0 ]
            then
                echo 1
                exit 1
            fi
        # if file cannot be found in commit repository
        else
            echo 2
            exit 1
        fi
    fi

    # option 4: compare specified file between index directory and last commit directory
    if ( test $1 -eq 3 )
    then
        if ( test -e "$last_commit" && test -e "$fullpath/$indexdir/$2")
        then
            diff "$last_commit" "$fullpath/$indexdir/$2" >/dev/null 2>&1
            if [ $? != 0 ]
            then
                echo 1
                exit 1
            fi
        else
             # if file cannot be found in commit repository or index directory
            echo 2
            exit 2
        fi
    fi
    #if file is the same 
    echo 0
}

#function to show the file status , get one input
status_show()
{	
    commitseq_chekout
    pre_seq="$?"
    #work == current directory
    #index == objects directory
    #last == repository last commit file
    work_index=`file_compare 1 $1 $pre_seq`
    work_last=`file_compare 2 $1 $pre_seq`
    index_last=`file_compare 3 $1 $pre_seq`
    # echo $work_index
    # echo $index_last
    # echo $work_last
	file=$1

	if !( test -e $file ) && ( test $index_last -eq 0)
	then
		echo "$file - file deleted"
	elif !( test -e $file ) && !( test -e $fullpath/$indexdir/$file )
	then
		echo "$file - deleted"
	elif ( test $work_last -eq 0 ) && ( test $index_last -eq 0)
	then
		echo "$file - same as repo"
	elif ( test -e $file ) && ( test $work_index -eq 2 )
	then
		echo "$file - untracked"
	elif ( test $work_index -eq 0 ) && ( test $work_last -eq 2)
	then
		echo "$file - added to index"
	elif ( test $work_index -eq 1 ) && ( test $index_last -eq 0 )
	then
		echo "$file - file changed, changes not staged for commit"
	elif ( test $work_index -eq 0 ) && ( test $index_last -eq 1 )
	then
		echo "$file - file changed, changes staged for commit"
	elif ( test $work_index -eq 1 ) && ( test $index_last -eq 1 )
	then 
		echo "$file - file changed, different changes staged for commit"
	fi

}

status()
{
	commitseq_chekout
    pre_seq="$?"
    
	for f_current in `ls`
	do
        name="$name:$f_current"
	done

	for f_index in `ls $fullpath/$indexdir/`
	do 
        name="$name:$f_index"
	done
	if (test $pre_seq -ge 0)
	then
		for f_last in `ls $fullpath/.commit_$pre_seq`
		do
            name="$name:$f_last"
		done
	fi

    #make file name unique ,sort it and input to status_show function 
    list=`echo "$name" | tr ":" "\n" | sort | uniq`
    for file in $list
    do
        status_show $file
    done


}


status 
