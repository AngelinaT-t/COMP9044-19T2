#!/usr/bin/perl -w
#written by Wanze Liu , z5137189

$legitdir='.legit';
$sub_legitdir='.git';
$fullpath="$legitdir/$sub_legitdir";
$indexdir="objects";

use File::Copy;
use File::Basename;
use File::Compare;
use File::Path;

# Subset 2
# function 2 checkout
# legit-checkout switches branches

sub usage {
    print("Usage: legit.pl <command> [<args>]\n\n",
"These are the legit commands:\n",
"   init       Create an empty legit repository\n",
"   add        Add file contents to the index\n",
"   commit     Record changes to the repository\n",
"   log        Show commit log\n",
"   show       Show file at particular state\n",
"   rm         Remove files from the current directory and from the index\n",
"   status     Show the status of files in the current directory, index, and repository\n",
"   branch     list, create or delete a branch\n",
"   checkout   Switch branches or restore current directory files\n",
"   merge      Join two development histories together\n\n");
}

# Check wether the git repository exists 
sub is_exist{
	if ( ! -d "$legitdir" ){
		print "legit-checkout: error: no $legitdir directory containing legit repository exists\n";
		exit 1;
	}
}

sub latest_commit_seq{
	(my $option,my $name)=@_;
	if ($option==1){
		$cur=&branch_inf_reader();
		@commit1=();
		open F,"<","$fullpath/Branch.$cur" or die "can't not open file Branch.$cur";
		foreach $f1 (<F>){
			push @commit1,$f1;
		}
		close F;
		return (reverse sort @commit1)[0];
	}
	if ($option==2){
		@commit2=();
		open F,"<","$fullpath/Branch.$name" or die "can't not open file Branch.$name";
		foreach $f1 (<F>){
			push @commit2,$f1;
		}
		close F;
		return (reverse sort @commit2)[0];
	}
}

sub branch_inf_reader{
	open F,"<","$fullpath/HEAD";
	foreach $f (<F>) {
		$current_branch=$f;
		chomp($current_branch);
	}
	close F;
	$current_branch =~ s/Branch.//;
	return $current_branch;
}

sub checkfile{
	my ($file) = @_; 
	if ( ! -e "$fullpath/Branch.$file" ){
		print "legit-checkout: error: unknown branch '$file'\n";
        exit 1;
	}
	if ($file eq &branch_inf_reader()){
		print "Already on '$file'\n";
        exit 0;
	}

}

sub overwritten{
	(my $cur , my $new ,my $branchname )=@_;
	if ( $cur == $new ){
		return;
	}
	@overwrite=();
	foreach $f (glob "*"){
		if (($f =~ "legit-*") || ($f =~ "diary.txt")){
			next;
		}
		if ( -e "$fullpath/\.commit_$new/$f" ) {
		if ((compare($f,"$fullpath/$indexdir/$f") != 0) && (compare($f,"$fullpath/\.commit_$cur/$f")!=0) && (compare($f,"$fullpath/\.commit_$new/$f")!=0)){
			push @overwrite , $f;
				}
			}
		}	
    if (@overwrite>0){
	print "legit-checkout: error: Your changes to the following files would be overwritten by checkout:\n";
    foreach my $f1 (sort @overwrite){
        print "$f1\n";
    }
    exit 1;
	}
}



sub main{
	my $branchname=$ARGV[0];
	&is_exist();
    if (@ARGV != 1){
        print "usage: legit-checkout <branch>\n";
        exit 1;
    }

    &checkfile($branchname);

    #current branch
	my $cur = &latest_commit_seq(1,$branchname);
    $cur =~ s/.*://;

    #the branch need to switch 
    my $new = &latest_commit_seq(2,$branchname);
    $new =~ s/.*://;


    chomp($cur);
    chomp($new);

    &overwritten($cur,$new,$branchname);

    open F,">" ,"$fullpath/HEAD";
    print F "$branchname";
    close F;

    #这是对index directory的操作
    # delete all the file in index that same as the last commit
    my @indexdir = glob("$fullpath/$indexdir/*");
    my @indexfile_lis = ();
    foreach $index (@indexdir){
    	my $curindex=basename($index);
    	#if exists in the last commit directory and the file in the index directory is the same delete it and push into an array
    	if ( -e "$fullpath/.commit_$cur/$curindex" && compare("$fullpath/.commit_$cur/$curindex","$index") == 0){
    		push @indexfile_lis , $curindex;
    		unlink ("$index");
    	}
    }

    #这是对current last commit directory的操作
	my @buff = glob("$fullpath/.commit_$cur/*");
	foreach $f_cur ( @buff ){
		# current directory files
		my $curfile=basename($f_cur);
		# files in last commit of branch u want to switche to
		my $newfile="$fullpath/.commit_$new/$curfile";
		# if file not exists in the branch that we want switch to but in current branch , delete it 
		if ( ! -e $newfile){
			unlink($curfile);
		}
		# if file in new branch is not same as the file in current branch,
		# copy it to the working directory when switches to new branch
		if ( -e "$newfile" && compare($curfile,$newfile) != 0 && compare($f_cur,$curfile) == 0 ){
		copy("$newfile","$curfile") or die "Copying $newfile failed!\n";
		}
	}


	#这是对即将装换的branch的last commit directory的操作
	# refresh from the last commit directory of branch that u want ot switch to
	my @buff1 = glob("$fullpath/.commit_$new/*");
    foreach $f_new ( @buff1 ){
    	$newfile1=basename($f_new);
    	# if file not exist in the current directory 
    	# copy it to current directory
    	if (! -e "$newfile1"){
    		copy("$f_new","$newfile1") or die  "Copying $newfile1 failed!\n";
    	}
    	#if file not exist in the index directory 
    	# copy it to current directory
    	if (! -e "$fullpath/$indexdir/$newfile1"){
    		copy("$f_new","$fullpath/$indexdir/$newfile1") or die  "Copying $newfile1 failed!\n";
    	}
    }

    foreach $f_commit (@buff1){
    	my $base=basename($f_commit);
    	foreach $f_index (@indexfile_lis){
    		if ( $base eq $f_index ){
    			copy("$f_commit" , "$fullpath/$indexdir/$base") or die  "Copying $f_commit failed!\n";
    		}
    	}
    }

    print "Switched to branch '$branchname'\n"; 

}


&main();



