#!/usr/bin/perl -w
$legitdir='.legit';
$sub_legitdir='.git';
$fullpath="$legitdir/$sub_legitdir";
# $indexdir="objects";
use File::Basename;
sub instruction{
	print "Usage: legit.pl <command> [<args>]\n\n";
    print "These are the legit commands:\n";
    print "   init       Create an empty legit repository\n";
    print "   add        Add file contents to the index\n";
    print "   commit     Record changes to the repository\n";
    print "   log        Show commit log\n";
    print "   show       Show file at particular state\n";
    print "   rm         Remove files from the current directory and from the index\n";
    print "   status     Show the status of files in the current directory, index, and repository\n";
    print "   branch     list, create or delete a branch\n";
    print "   checkout   Switch branches or restore current directory files\n";
    print "   merge      Join two development histories together\n\n";
    exit 1;
}

# three options
#	1. return all commits from the current branch 
#	2. delete specified branch 
# 	3. create new branch
sub branch_inf_reader{
	my ($option) = @_;
	open F,"<","$fullpath/HEAD";
	foreach $f (<F>) {
		$current_branch=$f;
		chomp($current_branch);
	}
	close F;
	if ($option == 1){
		my @list = ();
		open F, "<" ,"$fullpath/Branch.$current_branch" or die "cannot open $fullpath/$current_branch!\n";;
		foreach $commit (<F>){
			push @list,$commit;
		}
		close F;
		return @list;
	}
}

sub commitseq{
	$count=0;
	if ( ! -d "$fullpath/.commit_0"){
		return -1;
	}
	while ( -d "$fullpath/.commit_$count" ){
		$count+=1;
	}
	return $count;
}
sub is_exist{
	if ( ! -d "$legitdir" ){
		print "legit-branch: error: no $legitdir directory containing legit repository exists\n";
		exit 1;
	}
	if ( &commitseq == -1 ){
		print "legit-branch: error: your repository does not have any commits yet\n";
		exit 1;
	}
}
# sub check_legit {
# 	&is_exist;
# 	$seq= &commitseq;
# }
# three options
#	1. list all branch
#	2. delete specified branch 
# 	3. create new branch
sub branch {
	(  my $option,my $bname ) = @_;
	if ( $option == 1 ){
	@branchname=();
	foreach $file ( glob "$fullpath/*" ) {
		if (basename($file) =~ /Branch\..*/){
			$name = basename($file);
			$name =~ s/Branch.//;
			push(@branchname,$name);
		}
		}	
	my @sort_branchname = sort @branchname;
	foreach $f ( @sort_branchname ) {
		print $f,"\n";
		}
	exit 0;
	}
	if ( $option == 2 ){
		if ( $bname eq "master"){
            print "legit-branch: error: can not delete branch '$bname'\n";
            exit 1; 
		}
		elsif ( ! -e "$fullpath/Branch\.$bname" ){
			print "legit-branch: error: branch '$bname' does not exist\n";
            exit 1;
		}
		else{
            unlink("$fullpath/Branch.$bname");
            print "Deleted branch '$bname'\n";
        }
	}

	if ( $option == 3 ){
		if (( -e "$fullpath/Branch\.$bname") || ( $bname eq "master" )){
			print "legit-branch: error: branch '$bname' already exists\n";
            exit 1;
		}else{
			my @list = &branch_inf_reader(1);
			open F, ">" ,"$fullpath/Branch\.$bname";
			foreach $ele ( @list ){
				print F "$ele";
			}
			close F;
		}
	}
}
sub check_branchname{
	($arg)=@_;
	if ( $arg =~ /^[^_a-zA-Z0-9\-]/ 
				|| $arg =~ /[^_a-zA-Z0-9\-\.]/ 
				|| $arg !~ /[a-zA-Z]/ ){
				print "legit-branch: error: invalid branch name '$arg'\n";
		        exit 1;
}
sub main(){
	&is_exist();
	$delete=0;
	my @branchname=();
	foreach $arg ( @ARGV ){
		if ( $arg eq "-d" ){	
			$delete=1;
		}else{
			push @branchname,$arg;
			}
		}
	if ( @branchname == 0 && $delete != 1 ){
		&branch(1,$branchname[0]);
	}
	elsif ( @branchname == 1 && $delete == 1){
		&check_branchname($branchname[0]);
		&branch(2,$branchname[0]);
	}
	elsif ( @branchname == 1 ){
		&check_branchname($branchname[0]);
		&branch(3,$branchname[0]);
	}
	elsif (@branchname == 0 && $delete == 1){
		print "legit-branch: error: branch name required\n";
		exit 1;
	}
	else{
		print "usage: legit.pl branch [-d] <branch>\n";
        exit 1;
	}
}
}
&main();